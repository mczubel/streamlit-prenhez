import streamlit as st
import pandas as pd
from supabase import create_client

# --- Conexi√≥n a Supabase ---
url = "https://mziizuppnzrjpijufnhk.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im16aWl6dXBwbnpyanBpanVmbmhrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc5MzY5MzIsImV4cCI6MjA2MzUxMjkzMn0.hxCA_1e_5D-Um004TKtRxwRYpSWQV0O2FSAZGRoX7F4"

supabase = create_client(url, key)

st.title("üìä Taller de Pre√±ez Consultas y Estad√≠sticas")

# --- Selecci√≥n de a√±o y mes ---
#anio = st.selectbox("Seleccion√° el a√±o", [2021, 2022, 2023, 2024, 2025], index=3)
#mes = st.selectbox("Seleccion√° el mes", list(range(1, 13)), index=10)

# --- Bot√≥n para ejecutar consulta ---
#if st.button("Consultar datos"):
#    with st.spinner("Consultando Supabase..."):
#        res = supabase.rpc("obtener_pre√±ez_y_precipitacion_estancias", {
#            "anio_input": anio,
#            "mes_input": mes
#        }).execute()

#        if res.data:
#            df = pd.DataFrame(res.data)
#            st.success(f"‚úÖ {len(df)} estancias encontradas.")
#            st.dataframe(df)

            # Descargar CSV
#            csv = df.to_csv(index=False).encode("utf-8")
#            st.download_button("üì• Descargar CSV", csv, f"pre√±ez_precipitaciones_{anio}_{mes}.csv", "text/csv")
#        else:
#            st.warning("No se encontraron datos para ese mes y a√±o.")

# --- Bot√≥n para consultar total de vacas pa√≠s ---
if st.button("Consultar total de vacas diagnosticadas en el pa√≠s"):
    with st.spinner("Consultando total de vacas..."):
        res = supabase.table("lotes")\
            .select("vacias,pre√±ez_punta,pre√±ez_cola")\
            .execute()

        if res.data:
            df = pd.DataFrame(res.data)
            df = df.fillna(0)
            df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]] = df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]].astype(int)
            total = df["vacias"].sum() + df["pre√±ez_punta"].sum() + df["pre√±ez_cola"].sum()
            st.metric(label="üêÑ Total de vacas diagnosticadas", value=f"{total:,}")
        else:
            st.warning("No se encontraron datos.")

# --- Bot√≥n para consultar el porcentaje de pre√±ez nacional ---
if st.button("Consultar porcentaje de pre√±ez nacional"):
    with st.spinner("Calculando porcentaje de pre√±ez..."):
        res = supabase.table("lotes")\
            .select("vacias,pre√±ez_punta,pre√±ez_cola")\
            .execute()

        if res.data:
            df = pd.DataFrame(res.data)
            df = df.fillna(0)
            df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]] = df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]].astype(int)

            total = df["vacias"].sum() + df["pre√±ez_punta"].sum() + df["pre√±ez_cola"].sum()
            pre√±ez = df["pre√±ez_punta"].sum() + df["pre√±ez_cola"].sum()

            if total > 0:
                porcentaje = (pre√±ez / total) * 100
                st.metric(label="üìà Porcentaje de pre√±ez nacional", value=f"{porcentaje:.2f}%")
            else:
                st.warning("No hay datos suficientes para calcular el porcentaje.")
        else:
            st.warning("No se encontraron datos.")
# --- Bot√≥n para consultar total de animales por departamento ---
import unicodedata

# Funci√≥n para limpiar texto (tildes, may√∫sculas, espacios)
def normalizar_texto(texto):
    if pd.isnull(texto):
        return "SIN_DEPARTAMENTO"
    texto_sin_tildes = ''.join(
        c for c in unicodedata.normalize('NFD', str(texto))
        if unicodedata.category(c) != 'Mn'
    )
    return texto_sin_tildes.upper().strip()

# Bot√≥n de consulta
if st.button("Consultar porcentaje de pre√±ez por departamento"):
    with st.spinner("Consultando..."):
        try:
            # Cargar datos desde Supabase
            lotes = supabase.table("lotes").select("*").execute().data
            diagnosticos = supabase.table("diagnosticos").select("id, estancia_id").execute().data
            estancias = supabase.table("estancias").select("id, departamento").execute().data

            # Convertir a DataFrames
            df_lotes = pd.DataFrame(lotes)
            df_diag = pd.DataFrame(diagnosticos)
            df_est = pd.DataFrame(estancias)

            # Unir tablas
            merged = df_lotes.merge(df_diag, left_on="diagnostico_id", right_on="id", suffixes=('', '_diag'))
            merged = merged.merge(df_est, left_on="estancia_id", right_on="id", suffixes=('', '_est'))

            # üßπ Limpiar y normalizar el campo 'departamento'
            merged["departamento"] = merged["departamento"].apply(normalizar_texto)

            # Rellenar NaN num√©ricos
            merged[["vacias", "pre√±ez_punta", "pre√±ez_cola"]] = merged[["vacias", "pre√±ez_punta", "pre√±ez_cola"]].fillna(0)

            # Agrupar por departamento
            grouped = merged.groupby("departamento").agg(
                total_vacias=("vacias", "sum"),
                total_prep=("pre√±ez_punta", "sum"),
                total_prec=("pre√±ez_cola", "sum")
            ).reset_index()

            # Calcular totales y porcentaje
            grouped["total"] = grouped["total_vacias"] + grouped["total_prep"] + grouped["total_prec"]
            grouped["pre√±ez_total"] = grouped["total_prep"] + grouped["total_prec"]
            grouped["porcentaje_pre√±ez"] = round(grouped["pre√±ez_total"] * 100.0 / grouped["total"].replace(0, pd.NA), 2)

            # Seleccionar columnas finales
            #df_result = grouped[["departamento", "porcentaje_pre√±ez"]].sort_values(by="porcentaje_pre√±ez", ascending=False)
            df_result = grouped[[
                "departamento",
                "total_prep",
                "total_prec",
                "total_vacias",
                "total",
                "porcentaje_pre√±ez"
            ]].sort_values(by="porcentaje_pre√±ez", ascending=False)

            
            
            
            
            st.dataframe(df_result)

            # Bot√≥n para descargar CSV
            #csv = df_result.to_csv(index=False).encode("utf-8")
            df_result["porcentaje_pre√±ez"] = df_result["porcentaje_pre√±ez"].astype(str).str.replace(".", ",")

            csv = df_result.to_csv(index=False, sep=";").encode("utf-8")
            st.download_button("üì• Descargar CSV", csv, "porcentaje_pre√±ez_departamento.csv", "text/csv")

        except Exception as e:
            st.error(f"Ocurri√≥ un error: {e}")
# -----------------TOTAL DE VACAS POR DEPARTAMENTO------------------------
if st.button("Consultar total de vacas por departamento"):
    with st.spinner("Consultando..."):
        try:
            # Obtener datos de Supabase
            lotes = supabase.table("lotes").select("*").execute().data
            diagnosticos = supabase.table("diagnosticos").select("id, estancia_id").execute().data
            estancias = supabase.table("estancias").select("id, departamento").execute().data

            # Convertir a DataFrames
            df_lotes = pd.DataFrame(lotes)
            df_diag = pd.DataFrame(diagnosticos)
            df_est = pd.DataFrame(estancias)

            # Unir tablas
            merged = df_lotes.merge(df_diag, left_on="diagnostico_id", right_on="id", suffixes=('', '_diag'))
            merged = merged.merge(df_est, left_on="estancia_id", right_on="id", suffixes=('', '_est'))

            # Normalizar el texto del departamento
            merged["departamento"] = merged["departamento"].apply(normalizar_texto)

            # Rellenar NaN
            merged[["vacias", "pre√±ez_punta", "pre√±ez_cola"]] = merged[["vacias", "pre√±ez_punta", "pre√±ez_cola"]].fillna(0)

            # Agrupar por departamento y sumar total de vacas
            grouped = merged.groupby("departamento").agg(
                total_vacas=pd.NamedAgg(column="vacias", aggfunc="sum")
            )
            grouped["total_vacas"] += merged.groupby("departamento")["pre√±ez_punta"].sum()
            grouped["total_vacas"] += merged.groupby("departamento")["pre√±ez_cola"].sum()

            grouped = grouped.reset_index().sort_values(by="total_vacas", ascending=False)

            # Mostrar resultado
            st.dataframe(grouped)

            # Descargar CSV
            csv = grouped.to_csv(index=False).encode("utf-8")
            st.download_button("üì• Descargar CSV", csv, "total_vacas_por_departamento.csv", "text/csv")

        except Exception as e:
            st.error(f"Ocurri√≥ un error: {e}")
            
if st.button("Consultar discriminaci√≥n vs no discriminaci√≥n"):
    with st.spinner("Consultando..."):
        try:
            # Traer lotes
            lotes = supabase.table("lotes").select("categoria, vacias, pre√±ez_punta, pre√±ez_cola").execute().data
            df = pd.DataFrame(lotes)

            # Limpiar nulos
            df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]] = df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]].fillna(0)

            # Clasificar discriminaci√≥n
            df["tipo_discriminacion"] = df["categoria"].apply(
                lambda x: "No discriminado" if pd.isna(x) or str(x).strip().upper() == "SD" else "Discriminado"
            )

            # Calcular totales
            df["total_vacas"] = df["vacias"] + df["pre√±ez_punta"] + df["pre√±ez_cola"]
            df["total_pre√±adas"] = df["pre√±ez_punta"] + df["pre√±ez_cola"]

            # Agrupar y calcular porcentajes
            result = df.groupby("tipo_discriminacion").agg({
                "total_vacas": "sum",
                "total_pre√±adas": "sum"
            }).reset_index()

            result["porcentaje_pre√±ez"] = round(result["total_pre√±adas"] * 100.0 / result["total_vacas"].replace(0, pd.NA), 2)

            st.dataframe(result)

            # Bot√≥n para descargar
            result["porcentaje_pre√±ez"] = result["porcentaje_pre√±ez"].astype(str).str.replace(".", ",")
            csv = result.to_csv(index=False).encode("utf-8")
            st.download_button("üì• Descargar CSV", csv, "discriminacion_vs_no.csv", "text/csv")

        except Exception as e:
            st.error(f"Ocurri√≥ un error: {e}")
            
if st.button("Consultar pre√±ez por categor√≠a (solo discriminados)"):
    with st.spinner("Consultando..."):
        try:
            # Traer lotes
            lotes = supabase.table("lotes").select("categoria, vacias, pre√±ez_punta, pre√±ez_cola").execute().data
            df = pd.DataFrame(lotes)

            # Limpiar y filtrar solo discriminados
            df = df[df["categoria"].notna()]
            df["categoria"] = df["categoria"].astype(str).str.strip().str.upper()
            df = df[df["categoria"] != "SD"]

            # Reemplazar nulos en los campos num√©ricos
            df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]] = df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]].fillna(0)

            # Calcular totales
            df["total_vacas"] = df["vacias"] + df["pre√±ez_punta"] + df["pre√±ez_cola"]
            df["total_pre√±adas"] = df["pre√±ez_punta"] + df["pre√±ez_cola"]

            # Agrupar por categor√≠a
            result = df.groupby("categoria").agg({
                "total_vacas": "sum",
                "total_pre√±adas": "sum"
            }).reset_index()

            result["porcentaje_pre√±ez"] = round(result["total_pre√±adas"] * 100.0 / result["total_vacas"].replace(0, pd.NA), 2)

            # Ordenar
            result = result.sort_values(by="porcentaje_pre√±ez", ascending=False)

            st.dataframe(result)

            # Bot√≥n para descargar CSV
            result["porcentaje_pre√±ez"] = result["porcentaje_pre√±ez"].astype(str).str.replace(".", ",")
            csv = result.to_csv(index=False).encode("utf-8")
            st.download_button("üì• Descargar CSV", csv, "pre√±ez_por_categoria_discriminados.csv", "text/csv")

        except Exception as e:
            st.error(f"Ocurri√≥ un error: {e}")
            
if st.button("Consultar pre√±ez por tipo de manejo"):
    with st.spinner("Consultando..."):
        try:
            lotes = supabase.table("lotes").select("tipo_manejo, vacias, pre√±ez_punta, pre√±ez_cola").execute().data
            df = pd.DataFrame(lotes)

            # Limpiar tipo_manejo
            df["tipo_manejo"] = df["tipo_manejo"].fillna("Sin manejo").astype(str).str.strip()

            # Rellenar NaN num√©ricos
            df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]] = df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]].fillna(0)

            # Calcular totales
            df["total_animales"] = df["vacias"] + df["pre√±ez_punta"] + df["pre√±ez_cola"]
            df["total_pre√±adas"] = df["pre√±ez_punta"] + df["pre√±ez_cola"]

            # Agrupar por tipo_manejo
            result = df.groupby("tipo_manejo").agg({
                "total_animales": "sum",
                "total_pre√±adas": "sum"
            }).reset_index()

            result["porcentaje_pre√±ez"] = round(result["total_pre√±adas"] * 100.0 / result["total_animales"].replace(0, pd.NA), 2)

            result = result.sort_values(by="total_animales", ascending=False)

            st.dataframe(result)

            # Exportar CSV
            result["porcentaje_pre√±ez"] = result["porcentaje_pre√±ez"].astype(str).str.replace(".", ",")
            csv = result.to_csv(index=False).encode("utf-8")
            st.download_button("üì• Descargar CSV", csv, "pre√±ez_por_tipo_manejo.csv", "text/csv")

        except Exception as e:
            st.error(f"Ocurri√≥ un error: {e}")
if st.button("Consultar tipo de manejo por categor√≠a"):
    with st.spinner("Consultando..."):
        try:
            lotes = supabase.table("lotes").select("tipo_manejo, categoria, vacias, pre√±ez_punta, pre√±ez_cola").execute().data
            df = pd.DataFrame(lotes)

            # Normalizaci√≥n
            df["tipo_manejo"] = df["tipo_manejo"].fillna("Sin manejo").astype(str).str.strip()
            df["categoria"] = df["categoria"].fillna("Sin categor√≠a").astype(str).str.strip()

            # Rellenar NaNs
            df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]] = df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]].fillna(0)

            # Totales
            df["total_animales"] = df["vacias"] + df["pre√±ez_punta"] + df["pre√±ez_cola"]
            df["pre√±adas"] = df["pre√±ez_punta"] + df["pre√±ez_cola"]

            # Agrupar
            result = df.groupby(["tipo_manejo", "categoria"]).agg(
                total_animales=("total_animales", "sum"),
                total_pre√±adas=("pre√±adas", "sum")
            ).reset_index()

            result["porcentaje_pre√±ez"] = round(result["total_pre√±adas"] * 100.0 / result["total_animales"].replace(0, pd.NA), 2)

            # Ordenar
            result = result.sort_values(by=["tipo_manejo", "total_animales"], ascending=[True, False])
            st.dataframe(result)

            # Exportar CSV
            result["porcentaje_pre√±ez"] = result["porcentaje_pre√±ez"].astype(str).str.replace(".", ",")
            csv = result.to_csv(index=False).encode("utf-8")
            st.download_button("üì• Descargar CSV", csv, "manejo_por_categoria.csv", "text/csv")

        except Exception as e:
            st.error(f"Ocurri√≥ un error: {e}")
            
if st.button("Consultar por condici√≥n corporal"):
    with st.spinner("Consultando..."):
        try:
            lotes = supabase.table("lotes").select("condicion_corporal, vacias, pre√±ez_punta, pre√±ez_cola").execute().data
            df = pd.DataFrame(lotes)

            # Rellenar y convertir
            df["condicion_corporal"] = df["condicion_corporal"].fillna("Sin dato").astype(str)
            df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]] = df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]].fillna(0)

            df["total_animales"] = df["vacias"] + df["pre√±ez_punta"] + df["pre√±ez_cola"]
            df["pre√±adas"] = df["pre√±ez_punta"] + df["pre√±ez_cola"]

            result = df.groupby("condicion_corporal").agg(
                cantidad_lotes=("condicion_corporal", "count"),
                total_animales=("total_animales", "sum"),
                total_pre√±adas=("pre√±adas", "sum")
            ).reset_index()

            result["porcentaje_pre√±ez"] = round(result["total_pre√±adas"] * 100.0 / result["total_animales"].replace(0, pd.NA), 2)
            result = result.sort_values(by="condicion_corporal")

            st.dataframe(result)

            # Exportar CSV
            result["porcentaje_pre√±ez"] = result["porcentaje_pre√±ez"].astype(str).str.replace(".", ",")
            csv = result.to_csv(index=False).encode("utf-8")
            st.download_button("üì• Descargar CSV", csv, "pre√±ez_por_condicion_corporal.csv", "text/csv")

        except Exception as e:
            st.error(f"Ocurri√≥ un error: {e}")
            
if st.button("Consultar pre√±ez por categor√≠a y condici√≥n corporal (solo discriminados)"):
    with st.spinner("Consultando..."):
        try:
            # Obtener datos desde Supabase
            lotes = supabase.table("lotes").select("categoria, condicion_corporal, vacias, pre√±ez_punta, pre√±ez_cola").execute().data
            df = pd.DataFrame(lotes)

            # Filtrar solo categor√≠as discriminadas
            df = df[df["categoria"].notna() & (df["categoria"].str.upper() != "SD")]

            # Rellenar NaNs
            df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]] = df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]].fillna(0)

            # Agrupar por categor√≠a y condici√≥n corporal
            grouped = df.groupby(["categoria", "condicion_corporal"]).agg(
                total_vacias=("vacias", "sum"),
                total_prep=("pre√±ez_punta", "sum"),
                total_prec=("pre√±ez_cola", "sum")
            ).reset_index()

            # Calcular totales y porcentaje
            grouped["total_animales"] = grouped["total_vacias"] + grouped["total_prep"] + grouped["total_prec"]
            grouped["total_pre√±adas"] = grouped["total_prep"] + grouped["total_prec"]
            grouped["porcentaje_pre√±ez"] = round(grouped["total_pre√±adas"] * 100.0 / grouped["total_animales"].replace(0, pd.NA), 2)

            # Reemplazar punto por coma para Excel
            grouped["porcentaje_pre√±ez"] = grouped["porcentaje_pre√±ez"].astype(str).str.replace(".", ",")

            # Mostrar
            st.dataframe(grouped[["categoria", "condicion_corporal", "total_animales", "porcentaje_pre√±ez"]])

            # Descargar CSV
            csv = grouped[["categoria", "condicion_corporal", "total_animales", "porcentaje_pre√±ez"]].to_csv(index=False, sep=";").encode("utf-8")
            st.download_button("üì• Descargar CSV", csv, "pre√±ez_categoria_cond_corporal.csv", "text/csv")

        except Exception as e:
            st.error(f"Ocurri√≥ un error: {e}")
            
if st.button("Consultar pre√±ez por manejo y condici√≥n corporal"):
    with st.spinner("Consultando..."):
        try:
            # Consultar los datos desde Supabase
            lotes = supabase.table("lotes").select("tipo_manejo, condicion_corporal, vacias, pre√±ez_punta, pre√±ez_cola").execute().data
            df = pd.DataFrame(lotes)

            # Rellenar valores nulos
            df["tipo_manejo"] = df["tipo_manejo"].fillna("Sin manejo")
            df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]] = df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]].fillna(0)

            # Agrupar por tipo de manejo y condici√≥n corporal
            grouped = df.groupby(["tipo_manejo", "condicion_corporal"]).agg(
                total_vacias=("vacias", "sum"),
                total_prep=("pre√±ez_punta", "sum"),
                total_prec=("pre√±ez_cola", "sum")
            ).reset_index()

            # Calcular totales y porcentaje
            grouped["total_animales"] = grouped["total_vacias"] + grouped["total_prep"] + grouped["total_prec"]
            grouped["total_pre√±adas"] = grouped["total_prep"] + grouped["total_prec"]
            grouped["porcentaje_pre√±ez"] = round(grouped["total_pre√±adas"] * 100.0 / grouped["total_animales"].replace(0, pd.NA), 2)

            # Reemplazar punto por coma para Excel
            grouped["porcentaje_pre√±ez"] = grouped["porcentaje_pre√±ez"].astype(str).str.replace(".", ",")

            # Mostrar tabla
            st.dataframe(grouped[["tipo_manejo", "condicion_corporal", "total_animales", "porcentaje_pre√±ez"]])

            # Descargar CSV
            csv = grouped[["tipo_manejo", "condicion_corporal", "total_animales", "porcentaje_pre√±ez"]].to_csv(index=False, sep=";").encode("utf-8")
            st.download_button("üì• Descargar CSV", csv, "pre√±ez_manejo_condicion.csv", "text/csv")

        except Exception as e:
            st.error(f"Ocurri√≥ un error: {e}")


if st.button("Consultar por categor√≠a, manejo y condici√≥n corporal"):
    with st.spinner("Consultando..."):
        try:
            # Consultar los datos necesarios desde Supabase
            lotes = supabase.table("lotes").select("categoria, tipo_manejo, condicion_corporal, vacias, pre√±ez_punta, pre√±ez_cola").execute().data
            df = pd.DataFrame(lotes)

            # Filtrar categor√≠as v√°lidas
            df = df[df["categoria"].notna() & ~(df["categoria"].str.upper() == "SD")]

            # Rellenar valores nulos
            df["tipo_manejo"] = df["tipo_manejo"].fillna("Sin manejo")
            df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]] = df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]].fillna(0)

            # Agrupar y calcular totales
            grouped = df.groupby(["categoria", "tipo_manejo", "condicion_corporal"]).agg(
                total_vacias=("vacias", "sum"),
                total_prep=("pre√±ez_punta", "sum"),
                total_prec=("pre√±ez_cola", "sum")
            ).reset_index()

            # Calcular totales y porcentaje
            grouped["total_animales"] = grouped["total_vacias"] + grouped["total_prep"] + grouped["total_prec"]
            grouped["total_pre√±adas"] = grouped["total_prep"] + grouped["total_prec"]
            grouped["porcentaje_pre√±ez"] = round(grouped["total_pre√±adas"] * 100.0 / grouped["total_animales"].replace(0, pd.NA), 2)

            # Reemplazar punto decimal por coma
            grouped["porcentaje_pre√±ez"] = grouped["porcentaje_pre√±ez"].astype(str).str.replace(".", ",")

            # Mostrar resultados
            st.dataframe(grouped[["categoria", "tipo_manejo", "condicion_corporal", "total_animales", "porcentaje_pre√±ez"]])

            # Exportar CSV
            csv = grouped[["categoria", "tipo_manejo", "condicion_corporal", "total_animales", "porcentaje_pre√±ez"]].to_csv(index=False, sep=";").encode("utf-8")
            st.download_button("üì• Descargar CSV", csv, "pre√±ez_categoria_manejo_condicion.csv", "text/csv")

        except Exception as e:
            st.error(f"Ocurri√≥ un error: {e}")
if st.button("Consulta por lote (grupo de manejo y porcentaje de pre√±ez)"):
    with st.spinner("Consultando..."):
        try:
            # Obtener datos desde Supabase
            lotes = supabase.table("lotes").select(
                "id, diagnostico_id, tipo_manejo, vacias, pre√±ez_punta, pre√±ez_cola"
            ).execute().data

            df = pd.DataFrame(lotes)

            # Rellenar vac√≠os con 0 en los campos num√©ricos
            df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]] = df[["vacias", "pre√±ez_punta", "pre√±ez_cola"]].fillna(0)

            # Calcular totales
            df["total_pre√±adas"] = df["pre√±ez_punta"] + df["pre√±ez_cola"]
            df["total"] = df["total_pre√±adas"] + df["vacias"]

            # Filtrar filas donde no hay animales
            df = df[df["total"] > 0]

            # Agrupar tipo de manejo en 'CON MANEJO' o 'SIN MANEJO'
            df["grupo_manejo"] = df["tipo_manejo"].apply(lambda x: "SIN MANEJO" if x == "SM" else "CON MANEJO")

            # Calcular porcentaje de pre√±ez por lote
            df["porcentaje_pre√±ez_lote"] = (df["total_pre√±adas"] * 100.0 / df["total"]).round(2)

            # Reemplazar punto por coma para Excel
            df["porcentaje_pre√±ez_lote"] = df["porcentaje_pre√±ez_lote"].astype(str).str.replace(".", ",")

            # Eliminar columnas innecesarias
            df_result = df.drop(columns=["id", "diagnostico_id"])

            # Ordenar y mostrar
            df_result = df_result.sort_values(by="porcentaje_pre√±ez_lote", ascending=False)
            st.dataframe(df_result)

            # Descargar CSV
            csv = df_result.to_csv(index=False, sep=";").encode("utf-8")
            st.download_button("üì• Descargar CSV", csv, "pre√±ez_por_lote_filtrado.csv", "text/csv")

        except Exception as e:
            st.error(f"Ocurri√≥ un error: {e}")


if st.button("Consultar pre√±ez y precipitaci√≥n mensual (ABRIL 2024 - MARZO 2025)"):
    with st.spinner("Consultando..."):
        try:
            # Llamar a la funci√≥n RPC sin par√°metros
            res = supabase.rpc("pre√±ez_y_precipitacion_mensual").execute()

            # Convertir a DataFrame
            if res.data:
                df = pd.DataFrame(res.data)
                #st.dataframe(df)
                st.dataframe(df, use_container_width=True)


                # Reemplazar punto por coma si hay columnas num√©ricas como porcentaje
                if "porcentaje_pre√±ez" in df.columns:
                    df["porcentaje_pre√±ez"] = df["porcentaje_pre√±ez"].astype(str).str.replace(".", ",")

                # Exportar CSV
                csv = df.to_csv(index=False, sep=";").encode("utf-8")
                st.download_button("üì• Descargar CSV", csv, "pre√±ez_y_precipitacion_mensual.csv", "text/csv")
            else:
                st.warning("No se obtuvieron resultados.")

        except Exception as e:
            st.error(f"Ocurri√≥ un error: {e}")


if st.button("üìä An√°lisis de dispersi√≥n de predios con m√°s de un lote"):
    with st.spinner("Consultando Supabase..."):
        try:
            # Consulta 1: Pre√±ez por estancia con m√°s de un lote
            response_predios = supabase.rpc("pre√±ez_estancias_con_mas_de_un_lote").execute()
            data_predios = response_predios.data
            df_predios = pd.DataFrame(data_predios)

            # Consulta 2: Dispersi√≥n entre esas estancias
            response_dispersion = supabase.rpc("dispersi√≥n_pre√±ez_estancias_completas").execute()
            data_dispersion = response_dispersion.data[0]  # Es solo una fila

            # Reemplazar punto decimal por coma para exportaci√≥n CSV
            df_predios["porcentaje_preeniez"] = df_predios["porcentaje_preeniez"].astype(str).str.replace(".", ",")

            # Mostrar tabla de estancias
            st.subheader("‚úÖ Predios con m√°s de un lote")
            st.dataframe(df_predios)

            # Mostrar resultados estad√≠sticos
            st.subheader("üìà Indicadores de dispersi√≥n entre estancias")
            st.markdown(f"""
            - **Promedio de pre√±ez**: {data_dispersion['promedio_preeniez']}%
            - **Desv√≠o est√°ndar**: {data_dispersion['desvio_estandar']} puntos
            - **Coeficiente de variaci√≥n**: {data_dispersion['coef_variacion_pct']}%
            - **Brecha P90 - P10**: {data_dispersion['brecha_p90_p10']} puntos
            """)

            # Bot√≥n para descarga CSV
            csv = df_predios.to_csv(index=False).encode("utf-8")
            st.download_button("üì• Descargar CSV de estancias", csv, "predios_mas_de_un_lote.csv", "text/csv")

        except Exception as e:
            st.error(f"Ocurri√≥ un error al consultar las funciones: {e}")
if st.button("üìä Ver dispersi√≥n por manejo"):
    with st.spinner("Consultando..."):
        try:
            # Ejecutar funci√≥n SQL directamente
            result = supabase.rpc("dispersion_por_grupo_manejo").execute().data
            
            # Convertir a DataFrame
            df = pd.DataFrame(result)

            # Formatear porcentaje con coma decimal
            df["coef_variacion_pct"] = df["coef_variacion_pct"].astype(str).str.replace(".", ",")
            df["brecha_p90_p10"] = df["brecha_p90_p10"].astype(str).str.replace(".", ",")
            df["promedio_preeniez"] = df["promedio_preeniez"].astype(str).str.replace(".", ",")
            df["desvio_estandar"] = df["desvio_estandar"].astype(str).str.replace(".", ",")

            # Mostrar tabla
            st.dataframe(df)

            # CSV de descarga
            csv = df.to_csv(index=False, sep=";").encode("utf-8")
            st.download_button("üì• Descargar CSV", csv, "dispersion_por_manejo.csv", "text/csv")

        except Exception as e:
            st.error(f"Ocurri√≥ un error: {e}")

# Bot√≥n para obtener correlaci√≥n por grupo de manejo
if st.button("üìà Ver correlaci√≥n tama√±o vs pre√±ez por manejo"):
    try:
        response = supabase.rpc("correlacion_pre√±ez_por_manejo").execute()
        if response.data:
            df = pd.DataFrame(response.data)
            st.success("‚úÖ Correlaci√≥n calculada correctamente")
            st.dataframe(df)
            

            # Opci√≥n de descarga
            csv = df.to_csv(index=False).encode('utf-8')
            st.download_button("‚¨áÔ∏è Descargar CSV", csv, "correlacion_manejo.csv", "text/csv")
        else:
            st.warning("No se encontraron datos.")
    except Exception as e:
        st.error(f"Error al calcular la correlaci√≥n: {e}")